class Downloader {
    private DependencyHandler dependencyHandler
    private ConfigurationContainer configurationContainer

    public Downloader(DependencyHandler dependencyHandler,
                      ConfigurationContainer configurationContainer) {
        this.dependencyHandler = dependencyHandler
        this.configurationContainer = configurationContainer
    }

    List<File> download(
        ModuleVersionIdentifier dependency,
        String classifier
    ) {
        def sources = dependencyHandler.create(
            [
                "group"        : dependency.group,
                "name"         : dependency.name,
                "version"      : dependency.version,
                "classifier"   : classifier,
                "ext"          : "jar",
                "configuration": null,
            ]
        )
        def result = configurationContainer.detachedConfiguration(sources)

        try {
            if (result.files.size() > 0) {
                return result.files.toList()
            }
        } catch (Exception e) {
            return []
        }
    }
}

allprojects { project ->
    task kotlinLSPProjectDeps { task ->
        doLast {
            System.out.println ""
            System.out.println "gradle-version $gradleVersion"
            System.out.println "kotlin-lsp-project ${project.name}"

            if (project.hasProperty('android')) {
                project.android.getBootClasspath().each {
                    System.out.println "kotlin-lsp-gradle $it"
                }

                def variants = []

                if (project.android.hasProperty('applicationVariants')) {
                    variants += project.android.applicationVariants
                }

                if (project.android.hasProperty('libraryVariants')) {
                    variants += project.android.libraryVariants
                }

                variants.each { variant ->
                    def variantBase = variant.baseName.replaceAll("-", File.separator)

                    def buildClasses = project.getBuildDir().absolutePath +
                        File.separator + "intermediates" +
                        File.separator + variantBase +
                        File.separator + "classes"

                    System.out.println "kotlin-lsp-gradle $buildClasses"

                    def userClasses = project.getBuildDir().absolutePath +
                        File.separator + "intermediates" +
                        File.separator + "javac" +
                        File.separator + variantBase +
                        File.separator + "compile" + variantBase.capitalize() + "JavaWithJavac" + File.separator + "classes"

                    System.out.println "kotlin-lsp-gradle $userClasses"

                    def userVariantClasses = project.getBuildDir().absolutePath +
                        File.separator + "intermediates" +
                        File.separator + "javac" +
                        File.separator + variantBase +
                        File.separator + "classes"

                    System.out.println "kotlin-lsp-gradle $userVariantClasses"

                    variant.getCompileClasspath().each {
                        System.out.println "kotlin-lsp-gradle $it"
                    }
                }
            } else if (project.hasProperty('sourceSets')) {
                def downloader = new Downloader(project.dependencies, project.configurations)
                configurations.runtimeClasspath
                    .resolvedConfiguration
                    .resolvedArtifacts
                    .forEach { artifact ->
                        def files = downloader.download(artifact.moduleVersion.id, "sources")
                        files.forEach {
                            System.out.println "kotlin-lsp-source $it"
                        }
                    }

                // Print the list of all dependencies jar files.
                sourceSets.forEach {
                    it.compileClasspath.forEach {
                        System.out.println "kotlin-lsp-gradle $it"
                    }
                }
            }
        }
    }

    task kotlinLSPAllGradleDeps {
        doLast {
            fileTree("$gradle.gradleHomeDir/lib")
                .findAll { it.toString().endsWith '.jar' }
                .forEach { System.out.println "kotlin-lsp-gradle $it" }
        }
    }
}
