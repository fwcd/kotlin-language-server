plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
    id 'application'
    id 'com.github.jk1.tcdeps' version '1.2'
    id 'com.jaredsburrows.license' version '0.8.42'
    id 'com.ncorti.ktfmt.gradle' version '0.7.0'
}

version = projectVersion

mainClassName = 'org.javacs.kt.MainKt'
description = 'Code completions, diagnostics and more for Kotlin'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

application {
    applicationDefaultJvmArgs = ["-DkotlinLanguageServer.version=$projectVersion"]
}

def debugPort = 8000
def debugArgs = '-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n,quiet=y'

startScripts {
    applicationName = "kotlin-language-server"
}

repositories {
    maven { url uri("$projectDir/lib") }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation project(':shared')
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:$lsp4jVersion"
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc:$lsp4jVersion"
    implementation "org.jetbrains.kotlin:kotlin-compiler:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-compiler:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm-host-unshaded:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation 'org.jetbrains:fernflower:1.0'
    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    implementation 'com.h2database:h2:1.4.200'
    implementation 'com.github.fwcd.ktfmt:ktfmt:b5d31d1'
    implementation 'com.beust:jcommander:1.78'

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.11'
    testImplementation 'org.openjdk.jmh:jmh-core:1.20'

    // See https://github.com/JetBrains/kotlin/blob/65b0a5f90328f4b9addd3a10c6f24f3037482276/libraries/examples/scripting/jvm-embeddable-host/build.gradle.kts#L8
    compileOnly "org.jetbrains.kotlin:kotlin-scripting-jvm-host:$kotlinVersion"
    testCompileOnly "org.jetbrains.kotlin:kotlin-scripting-jvm-host:$kotlinVersion"

    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
}

configurations.all { config ->
    config.resolutionStrategy {
        preferProjectModules()
    }
}

applicationDistribution.into('bin') {
    fileMode = 755
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

task copyPropertiesToTestWorkspace(type: Copy) {
    from "$rootDir/gradle.properties"
    into file('src/test/resources/additionalWorkspace')
}

task copyPropertiesToDSLTestWorkspace(type: Copy) {
    from "$rootDir/gradle.properties"
    into file('src/test/resources/kotlinDSLWorkspace')
}

task fixFilePermissions(type: Exec) {
    // When running on macOS or Linux the start script
    // needs executable permissions to run.
    onlyIf { !System.getProperty("os.name").toLowerCase().contains("windows") }
    commandLine 'chmod', '+x', "${installDist.destinationDir}/bin/kotlin-language-server"
}

task debugRun(type: JavaExec) {
    mainClass = mainClassName
    classpath sourceSets.main.runtimeClasspath
    standardInput = System.in

    jvmArgs debugArgs
    doLast {
        println "Using debug port $debugPort"
    }
}

task debugStartScripts(type: CreateStartScripts) {
    applicationName = startScripts.applicationName
    mainClass = startScripts.mainClass
    outputDir = installDist.destinationDir.toPath().resolve('bin').toFile()
    classpath = startScripts.classpath
    defaultJvmOpts = [debugArgs]
}

task installDebugDist(type: Sync) {
    dependsOn installDist
    finalizedBy debugStartScripts
}

run {
    standardInput = System.in
}

processTestResources {
    dependsOn copyPropertiesToTestWorkspace, copyPropertiesToDSLTestWorkspace
}

test {
    dependsOn copyPropertiesToTestWorkspace, copyPropertiesToDSLTestWorkspace

    testLogging {
        events 'failed'
        exceptionFormat 'full'
    }
}

distZip {
    archiveFileName = "${project.name}.zip"
}

ktfmt {
    // KotlinLang style - 4 space indentation - From kotlinlang.org/docs/coding-conventions.html
    kotlinLangStyle()
}

build.dependsOn ktfmtCheck

installDist.finalizedBy fixFilePermissions
build.finalizedBy installDist
